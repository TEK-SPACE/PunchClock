@(Html.Kendo().Grid<PunchClock.Domain.Model.EmployeeInvite>()
      .Name("EmployeeInviteGrid")
      .Columns(columns =>
      {
          columns.Bound(c => c.Id).Hidden();
          columns.Bound(c => c.Name).Groupable(false);
          columns.Bound(c => c.Email).Groupable(false).Width(150);
          columns.Bound(c => c.UserTypeId).ClientGroupHeaderTemplate("#: getUserType(value) #").EditorTemplateName("UserTypeDropdownList");//.ClientTemplate("#: UserType.Description #"); 
          columns.Bound(c => c.InvitationDateUtc).Format("{0:dd/MM/yyyy}").Title("Invitation Date").HtmlAttributes(new { @class = "utc-date" });
          columns.Bound(c => c.InvitedBy);
          columns.Bound(c => c.IsRegistered).Groupable(false);
          columns.Bound(c => c.InviteRevoked).Groupable(false);
          columns.Command(command =>
          {
              command.Edit();
              command.Destroy();
          });
      })
      .ToolBar(toolbar =>
      {
          toolbar.Create().Text("Invite");
      })
      .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("EmployeeInviteEdit"))
      .Pageable(pageable => pageable
          .Refresh(true)
          .PageSizes(true)
          .ButtonCount(5))
      .Sortable()
      .Scrollable()
      //.HtmlAttributes(new { style = "height: 550px;" })
      .Groupable()
      .DataSource(dataSource => dataSource
          .Ajax()
          .PageSize(20)
          .Events(events => events.Error("gridErrorHandler"))
          .Model(model =>
          {
              model.Id(x => x.Id);
              model.Field(x => x.Id).Editable(false);
              model.Field(x => x.InvitationDateUtc).Editable(false);
              model.Field(x => x.IsRegistered).Editable(false);
              model.Field(x => x.InvitationDateUtc).Editable(false);
              model.Field(x => x.InviteRevoked).Editable(false);
          })
          .Read(read => read.Action("Invites", "Company"))
          .Create(update => update.Action("Invite", "Company"))
          .Update(update => update.Action("UpdateInvite", "Company"))
          .Destroy(update => update.Action("DeleteInvite", "Company"))
      )
)

<script>

    function getUserType(typeId) {
        var userTypes = @Html.Raw(Json.Encode(ViewData["UserTypes"]));
        var result = userTypes.filter(function( obj ) {
            return obj.Id === typeId;
        });
        return result[0].Discription;
    }
    function gridErrorHandler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>