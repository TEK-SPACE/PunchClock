@model IEnumerable<PunchClock.TimeTracker.Model.Punch>
@{
    ViewBag.Title = "TimeTracker Dashboard";
}
@(Html.Kendo().Grid(Model)
      .Name("TimeTrackingLogsGrid")
      .Columns(columns =>
      {
          columns.Bound(c => c.Id).Hidden(true).HtmlAttributes(new {style="text-align:center;"});
          columns.Bound(c => c.ApprovalRequired).Visible((bool)ViewBag.IsAdmin).ClientTemplate("# if (ApprovalRequired == true && Approved == false && '"+ (ViewBag.IsAdmin).ToString() + "'=== 'True') {# Yes: <a data-ajax='true' data-ajax-complete='refreshGrid' data-ajax-method='POST' href='/Punch/Approve/#:Id#' class='grid-link' >Approve</a>#} else{# No #}#");
          columns.Bound(c => c.EmployeeName).Filterable(ftb => ftb.Multi(true).Search(true));
          columns.Bound(c => c.Month).Filterable(ftb => ftb.Multi(true));
          columns.Bound(c => c.PunchDate)
              .ClientFooterTemplate("#= getFormattdDate(data.PunchDate.min) # - #= getFormattdDate(data.PunchDate.max) # ")
              .ClientGroupHeaderTemplate("#:convetUtcDateToLocalDate(PunchDate)#").HtmlAttributes(new { @class = "utc-date", utc_date_value = "#:PunchDate#" });
          columns.Bound(c => c.PunchIn).Groupable(false).Filterable(false).ClientTemplate("#:PunchIn.Hours#:#:PunchIn.Minutes#").HtmlAttributes(new { @class = "utc-time", utc_time_value = "#:PunchIn.Hours#:#:PunchIn.Minutes#" });
          columns.Bound(c => c.PunchOut).Groupable(false).Filterable(false).ClientTemplate("#:PunchOut == null ? 0 :PunchOut.Hours #:#: PunchOut == null ? 0 : PunchOut.Minutes  #").HtmlAttributes(new {@class= "utc-time", utc_time_value = "#: PunchOut == null ? 0 : PunchOut.Hours#:#:PunchOut == null ? 0 : PunchOut.Minutes #" });
          columns.Bound(c => c.Duration).Groupable(false).Filterable(false)
              .ClientFooterTemplate("#= SecondsToTime(data.DurationInSeconds.sum) # ")
              .ClientTemplate("#:formatDuration(Duration.Hours,Duration.Minutes) #").HtmlAttributes(new { @class = "" });
          columns.Bound(c => c.Comments).Visible((bool)ViewBag.IsAdmin).Filterable(false).Groupable(false).ClientTemplate("# if (ApprovalRequired == true && Approved == false && '" + (ViewBag.IsAdmin).ToString() + "' !== 'True') {# Please get this time log approved #} else{#  #:Comments# #}#");
          //columns.Command(command =>
          //{
          //    command.Edit().Text(" ");
          //    command.Destroy().Text(" ");
          //}).Width(50);
      })
      .HtmlAttributes(new { style = "", @class = "full-screen-dashboard" })
      //.Scrollable()
      .Groupable()
      .Sortable()
      .Filterable()
      .Navigatable()
      .ToolBar(toolbar => {
          //toolbar.Create();
          //toolbar.Save();
          toolbar.Pdf();
          toolbar.Excel();
      })

      .Excel(exl=>exl.AllPages(true).Filterable(true).FileName("Timesheet.xlsx")
          .ProxyURL(Url.Action("ExportSave", "Punch")))
      .Pdf(pdf => pdf
          .AllPages()
          .Title("Time Tracker Report")
          .Subject("Daily Activity")
          .AvoidLinks()
          .PaperSize("A4")
          .Scale(0.8)
          .Margin("2cm", "1cm", "1cm", "1cm")
          .Landscape()
          .RepeatHeaders()
          .TemplateId("page-template")
          .FileName("PunchClock Result")
          .ProxyURL(Url.Action("ExportSave", "Punch"))
      )
      .Events(events=>events.DataBound("convertUtcToLocal"))
      //.Editable(editable => editable.Mode(GridEditMode.InCell))
      .Pageable(pageable => pageable
          .Refresh(true)
          .PageSizes(true)
          .ButtonCount(5))
      .DataSource(dataSource => dataSource
          .Ajax()
          .Batch(true)
          .PageSize(20)
          .ServerOperation(false)
          .Events(events => events.Error("gridErrorHandler"))
          .Aggregates(aggrgates=> aggrgates.Add(x=>x.DurationInSeconds).Sum())
          .Aggregates(aggrgates => aggrgates.Add(x => x.PunchDate).Min())
          .Aggregates(aggrgates => aggrgates.Add(x => x.PunchDate).Max())
          .Model(model =>
          {
              model.Id(x => x.Id);
              model.Field(c => c.Id).Editable(false);
          })
          .Group(groups=> groups.Add(x=>x.EmployeeName))
          .Group(groups => groups.Add(x => x.Month))

          .Read(read => read.Action("Read", "Punch"))
      //.Create(update => update.Action("Add", "Ticket"))
      //.Update(update => update.Action("Update", "Punch"))
      //.Destroy(update => update.Action("Delete", "Punch"))
      )
      )

<script>
    function gridErrorHandler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>