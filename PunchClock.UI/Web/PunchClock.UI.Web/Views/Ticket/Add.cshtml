@using PunchClock.Ticketing.Model.Constants
@using Tooltip = PunchClock.Ticketing.Model.Constants.Tooltip
@model PunchClock.Ticketing.Model.Ticket
@{
    ViewBag.Title = "New Ticket";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="col-lg-12 form-horizontal">
        <div class="panel panel-success panel-nomargin">
            <div class="panel-body">New Ticket Details</div>
        </div>
        <div class="well">
            <fieldset>
                @Html.ValidationSummary(true, "", new {@class = "text-danger"})
                @Html.Raw(ViewData["ModelError"] as string)
                <div class="form-group">
                    <div class="col-md-12">
                        @Html.LabelFor(x=>x.Title, htmlAttributes: new { @class = "control-label" })
                        @Html.Kendo().TextBoxFor(model => model.Title).Value("").HtmlAttributes(new {@class = "form-control", placeholder = Placeholder.Title, title = Tooltip.Title})
                        @Html.ValidationMessageFor(model => model.Title, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-6">
                        @Html.LabelFor(x => x.ProjectId, htmlAttributes: new { @class = "control-label" })
                        @Html.Kendo().ComboBoxFor(model => model.ProjectId).Suggest(true).Events(x => x.Change("comboboxChangeEvent")).DataTextField("Name").DataValueField("Id").DataSource(x => x.Read("Projects", "Ticket")).Placeholder(Placeholder.Project).HtmlAttributes(new {title = Tooltip.Project})
                        @Html.ValidationMessageFor(model => model.ProjectId, "", new {@class = "text-danger"})
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(x => x.PriorityId, htmlAttributes: new { @class = "control-label" })
                        @Html.Kendo().ComboBoxFor(model => model.PriorityId).Events(x => x.Change("comboboxChangeEvent")).DataTextField("Name").DataValueField("Id").DataSource(x => x.Read("Priorities", "Ticket")).Placeholder("Priority")
                        @Html.ValidationMessageFor(model => model.PriorityId, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-12">
                        @Html.LabelFor(x => x.Description, htmlAttributes: new { @class = "control-label" })
                        @Html.Kendo().EditorFor(model => model.Description).HtmlAttributes(new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.Description, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-6">
                        @Html.LabelFor(x => x.StatusId, htmlAttributes: new { @class = "control-label" })
                        @Html.Kendo().ComboBoxFor(model => model.StatusId).Events(x => x.Change("comboboxChangeEvent")).DataTextField("Name").DataValueField("Id").DataSource(x => x.Read("Status", "Ticket")).Placeholder("Status")
                        @Html.ValidationMessageFor(model => model.StatusId, "", new {@class = "text-danger"})
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(x => x.TypeId, htmlAttributes: new { @class = "control-label" })
                        @Html.Kendo().ComboBoxFor(model => model.TypeId).Events(x => x.Change("comboboxChangeEvent")).DataTextField("Name").DataValueField("Id").DataSource(x => x.Read("Types", "Ticket")).Placeholder("Type")
                        @Html.ValidationMessageFor(model => model.TypeId, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-6">
                        @Html.LabelFor(x => x.RequestorId, htmlAttributes: new { @class = "control-label" })
                        @Html.Kendo().ComboBoxFor(model => model.RequestorId).Events(x => x.Change("comboboxChangeEvent")).DataTextField("DisplayName").DataValueField("Id").DataSource(x => x.Read("All", "User")).Placeholder("Requestor")
                        @Html.ValidationMessageFor(model => model.RequestorId, "", new {@class = "text-danger"})
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(x => x.AssignedToId, htmlAttributes: new { @class = "control-label" })
                        @Html.Kendo().ComboBoxFor(model => model.AssignedToId).Events(x => x.Change("comboboxChangeEvent")).DataTextField("DisplayName").DataValueField("Id").DataSource(x => x.Read("All", "User")).Placeholder("Assigned To")
                        @Html.ValidationMessageFor(model => model.AssignedToId, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="form-group">
                    @*@Html.LabelFor(model => model.NotifyTo, htmlAttributes: new { @class = "control-label col-md-2" })*@
                    <div class="col-md-12">
                        @Html.LabelFor(x => x.NotifyTo, htmlAttributes: new { @class = "control-label" })
                        @Html.Kendo().MultiSelectFor(model => model.NotifyTo).DataTextField("DisplayName").DataValueField("Id").DataSource(x => x.Read("All", "User")).Placeholder("Notify To")
                        @Html.ValidationMessageFor(model => model.NotifyTo, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-9">
                        @Html.LabelFor(x => x.CategoryId, htmlAttributes: new { @class = "control-label" })
                        @Html.Kendo().ComboBoxFor(model => model.CategoryId).Events(x => x.Change("comboboxChangeEvent")).DataTextField("Name").DataValueField("Id").DataSource(x => x.Read("Categories", "Ticket")).Placeholder("Category")
                        @Html.ValidationMessageFor(model => model.CategoryId, "", new {@class = "text-danger"})
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(x => x.DueDateUtc, htmlAttributes: new { @class = "control-label" })
                        @Html.Kendo().DatePickerFor(model => model.DueDateUtc).DateInput().Min(DateTime.Now.AddDays(1)).HtmlAttributes(new {placeholder = "Due Date", style = "width:100%;"})
                        @Html.ValidationMessageFor(model => model.DueDateUtc, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-6">
                        @Html.LabelFor(x => x.EstimatedEffort, htmlAttributes: new { @class = "control-label" })
                        @Html.Kendo().NumericTextBoxFor(model => model.EstimatedEffort).HtmlAttributes(new {style = "width:100%;"}).Placeholder("Estimated Effort")
                        @Html.ValidationMessageFor(model => model.EstimatedEffort, "", new {@class = "text-danger"})
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(x => x.CompletedWork, htmlAttributes: new { @class = "control-label" })
                        @Html.Kendo().NumericTextBoxFor(model => model.CompletedWork).HtmlAttributes(new {style = "width:100%;"}).Placeholder("Completed Work")
                        @Html.ValidationMessageFor(model => model.CompletedWork, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="">
                    <input type="submit" value="Submit" class="btn btn-primary"/>
                    <input type="button" value="Cancel" class="btn btn-primary" onclick="location.href = '/Ticket';"/>
                </div>
            </fieldset>
        </div>
    </div>
}
<script>
    function filterStates() {
        return {
            id: $("#CreatedBy_RegistrationAddress_CountryId").val()
        };
    }

</script>
@Scripts.Render("~/bundles/Ticketing")
