@model IEnumerable<PunchClock.Ticketing.Model.Ticket>
@{
    ViewBag.Title = "Tickets Dashboard";
}
<hgroup class="title">
    <h1>@ViewBag.Title</h1>
    <h2>@Html.Raw((string)ViewBag.Message)</h2>
</hgroup>
<div class="clearFloat"></div>
<hr />

@(Html.Kendo().Grid(Model)
      .Name("TicketsGrid")
      .Columns(columns =>
      {
          columns.Bound(c => c.Id);
          columns.Bound(c => c.ProjectId).ClientTemplate("#: TicketProject.Name #");
          columns.Bound(c => c.Title);
          columns.Bound(c => c.CreatedById).ClientTemplate("#: CreatedBy.DisplayName #");
          columns.Bound(c => c.RequestorId).ClientTemplate("#: Requestor.DisplayName #");
          columns.Bound(c => c.TypeId).ClientTemplate("#: Type.Name #"); ;
          columns.Bound(c => c.StatusId).ClientTemplate("#: Status.Name #"); ;
          columns.Bound(c => c.PriorityId).ClientTemplate("#: Priority.Name #"); ;
          columns.Bound(c => c.AssignedToId).EditorTemplateName("UsersDropdownList").ClientTemplate("#: AssignedTo.DisplayName #");
          columns.Bound(c => c.DueDateUtc);
          columns.Bound(c => c.ModifiedById).ClientTemplate("#: ModifiedBy.DisplayName #");
          columns.Bound(c => c.CreatedDateUtc).Format("{0:dd/MM/yyyy HH:mm}");
          columns.Bound(c => c.ModifiedDateUtc).Format("{0:dd/MM/yyyy HH:mm}");
          columns.Command(command =>
          {
              command.Edit();
              command.Destroy();
          });
      })
      .HtmlAttributes(new { style = "height: 550px;" })
      //.Scrollable()
      .Groupable()
      .Sortable()
      .ToolBar(toolbar => {
          //toolbar.Create();
          toolbar.Save();
      })
      .Editable(editable => editable.Mode(GridEditMode.InCell))
      .Pageable(pageable => pageable
          .Refresh(true)
          .PageSizes(true)
          .ButtonCount(5))
      .DataSource(dataSource => dataSource
          .Ajax()
          .Events(events => events.Error("gridErrorHandler"))
          .Model(model =>
          {
              model.Id(x => x.Id);
              model.Field(c => c.Id).Editable(false);
              model.Field(c => c.ProjectId).Editable(false);
              model.Field(c => c.RequestorId).Editable(false);
              model.Field(c => c.CreatedById).Editable(false);
              model.Field(c => c.CreatedDateUtc).Editable(false);
              model.Field(c => c.ModifiedById).Editable(false);
              model.Field(c => c.ModifiedDateUtc).Editable(false);
          })
          .Read(read => read.Action("Read", "Ticket"))
          //.Create(update => update.Action("Add", "Ticket"))
          .Update(update => update.Action("Update", "Ticket"))
          .Destroy(update => update.Action("Delete", "Ticket"))
          .PageSize(20)
      )
      )

<script>
    function gridErrorHandler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>