@using PunchClock.Domain.Model
@model IEnumerable<PunchClock.Ticketing.Model.Ticket>
@{
    ViewBag.Title = "Tickets Dashboard";
}
@*<hgroup class="title">
    <h1>@ViewBag.Title</h1>
    <h2>@Html.Raw((string)ViewBag.Message)</h2>
</hgroup>
<div class="clearFloat"></div>
<hr />*@

@(Html.Kendo().Grid(Model)
      .Name("TicketsGrid")
      .Columns(columns =>
      {
          columns.Bound(c => c.Id).HtmlAttributes(new {style="text-align:center;"});
          columns.Bound(c => c.ProjectId).ClientGroupHeaderTemplate("#:getTicketProject(value) #").ClientTemplate("#: TicketProject.Name #");
          columns.Bound(c => c.Title).Template(@<text> @Html.ActionLink(@item.Title, "Edit","Ticket", new { id= @item.Id}, new { @class="grid-link"}) </text>).ClientTemplate("<a href='/Ticket/Edit/#:Id#' target='_blank' class='grid-link'> #:Title# </a>");
          columns.Bound(c => c.CreatedById).ClientGroupHeaderTemplate("#: getUserName(value) #").EditorTemplateName("UsersDropdownList").ClientTemplate("#: CreatedBy.DisplayName #");
          columns.Bound(c => c.RequestorId).ClientGroupHeaderTemplate("#: getUserName(value) #").EditorTemplateName("UsersDropdownList").ClientTemplate("#: Requestor.DisplayName #");
          columns.Bound(c => c.TypeId).ClientGroupHeaderTemplate("#:getTicketType(value) #").EditorTemplateName("TicketTypes").ClientTemplate("#: Type.Name #"); ;
          columns.Bound(c => c.StatusId).ClientGroupHeaderTemplate("#:getTicketStatus(value) #").EditorTemplateName("TicketStatus").ClientTemplate("#: Status.Name #"); ;
          columns.Bound(c => c.PriorityId).ClientGroupHeaderTemplate("#:getTicketPriority(value) #").EditorTemplateName("TicketPriorities").ClientTemplate("#: Priority.Name #"); ;
          columns.Bound(c => c.AssignedToId).ClientGroupHeaderTemplate("#: getUserName(value) #").EditorTemplateName("UsersDropdownList").ClientTemplate("#: AssignedTo.DisplayName #");
          columns.Bound(c => c.DueDateUtc).EditorTemplateName("Date").HtmlAttributes(new { @class = "utc-date", utc_date_value = "#:DueDateUtc#" });//.Format("{0:dd/MM/yyyy}");
          columns.Bound(c => c.ModifiedById).ClientGroupHeaderTemplate("#: getUserName(value) #").EditorTemplateName("UsersDropdownList").ClientTemplate("#: ModifiedBy.DisplayName #");
          columns.Bound(c => c.CreatedDateUtc).HtmlAttributes(new { @class="utc-date-time", utc_date_time_value = "#:CreatedDateUtc#" });//.Format("{0:dd/MM/yyyy HH:mm tt}");
          columns.Bound(c => c.ModifiedDateUtc).HtmlAttributes(new { @class = "utc-date-time", utc_date_time_value = "#:ModifiedDateUtc#" });
          columns.Command(command =>
          {
              //command.Edit().Text(" ");
              command.Destroy().Text(" ");
          }).Width(50);
      })
      .ToolBar(toolbar => {
                              //toolbar.Create();
                              toolbar.Save();
      })
      .Editable(editable => editable.Mode(GridEditMode.InCell))
      .Pageable(pageable => pageable
          .Refresh(true)
          .PageSizes(true)
          .ButtonCount(5))
          .Events(events =>
          events.Group("OnTicketsGrouping"))
      .Navigatable()
      .Sortable()
      //.Scrollable()
      .Groupable()
      .HtmlAttributes(new { @class= "full-screen-dashboard" })
      .Events(events=>events.DataBinding("convertUtcToLocal").DataBound("convertUtcToLocal").Change("onTicketListChange"))
      .DataSource(dataSource => dataSource
          .Ajax()
          .Batch(true)
          .PageSize(20)
          .ServerOperation(false)
          .Events(events => events.Error("gridErrorHandler").Sync("ticketsGridSyncHandler"))
          .Model(model =>
          {
              model.Id(x => x.Id);
              model.Field(c => c.Id).Editable(false);
              model.Field(c => c.ProjectId).Editable(false);
              model.Field(c => c.Title).Editable(false);
              model.Field(c => c.RequestorId).Editable(false);
              model.Field(c => c.CreatedById).Editable(false);
              model.Field(c => c.CreatedDateUtc).Editable(false);
              model.Field(c => c.ModifiedById).Editable(false);
              model.Field(c => c.ModifiedDateUtc).Editable(false);
          })
          //.Create(update => update.Action("Add", "Ticket"))
          .Read(read => read.Action("Read", "Ticket"))
          .Update(update => update.Action("Update", "Ticket"))
          .Destroy(update => update.Action("Delete", "Ticket"))
      )
      )

<script>
    function gridErrorHandler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            console.log(message);
        }
    }
    function ticketsGridSyncHandler(e) {
        this.read();
    }
    function OnTicketsGrouping(arg) {
    }

    function onTicketListChange(e) {
        console.log(e);
    }

    function getUserName(userId) {
        var users = @Html.Raw(Json.Encode(ViewData["Users"]));
        var result = users.filter(function( obj ) {
            return obj.Id === userId;
        });
        return result[0].DisplayName;
    }
    function getTicketProject(id) {
        var users = @Html.Raw(Json.Encode(ViewData["TicketProjects"]));
        var result = users.filter(function( obj ) {
            return obj.Id === id;
        });
        return result[0].Name;
    }
    function getTicketType(id) {
        var users = @Html.Raw(Json.Encode(ViewData["TicketTypes"]));
        var result = users.filter(function( obj ) {
            return obj.Id === id;
        });
        return result[0].Name;
    }
    function getTicketStatus(id) {
        var users = @Html.Raw(Json.Encode(ViewData["TicketStatusus"]));
        var result = users.filter(function( obj ) {
            return obj.Id === id;
        });
        return result[0].Name;
    }
    function getTicketPriority(id) {
        var users = @Html.Raw(Json.Encode(ViewData["TicketPriorities"]));
        var result = users.filter(function( obj ) {
            return obj.Id === id;
        });
        return result[0].Name;
    }
</script>